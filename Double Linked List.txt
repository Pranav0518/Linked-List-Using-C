 #include <stdio.h>
#include<stdlib.h>

void CreateLinkedList(int n);
void insert_beginning();
void insert_end();
void insert_middle();
void delete_beginning();
void delete_end();
void delete_middle();
void search();
void display();

struct node
{
    struct node *prev;
    int data;
    struct node *next;
} * stNode,* head;

int main() {
    int n1,x=1,c;
    printf("Enter the number of nodes :");
    scanf("%d",&n1);
    CreateLinkedList(n1);
    while(x==1)
    {
    printf("\n1.Insert a node at the beginning:\n");
    printf("2.Insert a node at the N position:\n");
    printf("3.Insert a node at the end:\n");
    printf("4.delete a node at the beginning:\n");
    printf("5.delete a node at the N position:\n");
    printf("6.Insert a node at the end:\n");
    printf("7.Display all the nodes:\n");
    printf("8.Search a node:\n");
    printf("Enter a choice\n");
    scanf("%d",&c);
    switch(c)
    {
        case 1:
         insert_beginning();
         break;
        case 2:
         insert_middle();
         break;
        case 3:
         insert_end();
         break;
        case 4:
         delete_beginning();
         break;
        case 5:
         delete_middle();
         break;
        case 6:
         delete_end();
         break;
        case 7:
         display();
         break;
        case 8:
         search();
         break;
        default:
         printf("Invalid Input");
         break;
         
         
    }
    
  }
return 0;
}
void CreateLinkedList(int n)
{
    struct node *newNode,*temp2,*temp1;
    int num;
    stNode=(struct node*)malloc(sizeof(struct node));
    if(stNode==NULL)
    {
        printf(" Memory can not be allocated.");
    }
    else
    {
       printf(" Input data for node 1 : ");
       scanf("%d", &num);
       stNode->prev=NULL;
       stNode->data=num;
       stNode->next=NULL;
       temp1=stNode;
       head=stNode;
       
    for(int i=2;i<=n;i++)
    {
        newNode = (struct node *)malloc(sizeof(struct node));
        if(newNode == NULL)
        {
                printf(" Memory can not be allocated.");
                break;
        }
        else
            {
                printf(" Input data for node %d : ", i);
                scanf(" %d", &num);
                newNode->data=num;
                newNode->next=NULL;
                temp1->next=newNode;
                temp2=temp1;
                temp1=temp1->next;
                temp1->prev=temp2;
            }
       }
    }
}
void insert_beginning()
{
    struct node *newNode,*temp;
    int num;
    printf("Enter the data :");
    scanf("%d",&num);
    newNode=(struct node *)malloc(sizeof(struct node));
    if(newNode == NULL)
        {
                printf(" Memory can not be allocated.");
                
        }
    else
            {
                temp=head;
                newNode->data=num;
                temp->prev=newNode;
                newNode->prev=NULL;
                newNode->next=head;
                head=newNode;
            }
    
}
void insert_end()
{
    struct node *newNode,*temp;
    int num;
    printf("Enter the data :");
    scanf("%d",&num);
    newNode=(struct node *)malloc(sizeof(struct node));
    if(newNode == NULL)
        {
                printf(" Memory can not be allocated.");
         
        }
    else
    {
        temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newNode;
        newNode->data=num;
        newNode->prev=temp;
        newNode->next=NULL;
    }
}
void insert_middle()
{
     struct node *newNode,*temp,*temp2;
    int num,pos,i=1;
    printf("Enter the data :");
    scanf("%d",&num);
    newNode=(struct node *)malloc(sizeof(struct node));
    if(newNode == NULL)
        {
                printf(" Memory can not be allocated.");
               
        }
    else
    {
        temp=head;
        printf("Enter the position: ");
        scanf("%d",&pos);
        while(i<pos-1)
        {
            temp=temp->next;
            temp2=temp->next;
            i++;
        }
        newNode->next=temp->next;
        newNode->prev=temp;
        temp->next=newNode;
        newNode->data=num;
        temp2->prev=newNode;
        
    }
}
void delete_beginning()
{
    struct node *temp;
    if(head==NULL)
      printf("empty list: ");
    else
    {
    temp=head;
    temp=temp->next;
    head=temp;
    temp->prev=NULL;
    free(temp);
    }
}
void delete_end()
{
    struct node *temp1,*temp2;

    if(head==NULL)
      printf("empty list: ");
    else
    {
       temp1=head;
       while(temp1->next!=NULL)
       {
           temp2=temp1;
           temp1=temp1->next;
       }
       temp2->next=NULL;
       free(temp1);
    }
       
}
void delete_middle()
{
    struct node *temp1,*temp2;
    int i=1,pos;
    if(head == NULL)
        {
                printf(" empty list");
               
        }
    else
    {
       temp1=head;
       while(i<pos-1)
       {
           
           temp1=temp1->next;
           temp2=temp1->next;
           i++;
       }
       temp1->next=temp2->next;
       temp2=temp2->next;
       temp2->prev=temp1;
       free(temp2);
    }
    
}
void search()
{
    struct node *temp;
    int c,pos,datac,i=1;
    printf("\n1.Search through position \n");
    printf("2.Search through data \n");
    printf("Enter the choice: ");
    scanf("%d",&c);
    if(c==1)
    {
        if(head==NULL)
        {
            printf("empty list");
        }
        else
        {
            printf("Enter position: ");
            scanf("%d",&pos);
            temp=head;
            while(i<pos)
            {
                temp=temp->next;
                i++;
            }
            printf("The node at position %d:%d ",i,temp->data);
            //printf("The next address of the node %d;%d ",i,temp->next);
        }
    }
    else if(c==2)
    {
        if(head==NULL)
        {
            printf("empty list");
        }
        else
        {
            printf("Enter the data: ");
            scanf("%d",&datac);
            temp=head;
            while(temp->data!=datac)
            {
                temp=temp->next;
                i++;
            }
            printf("The node at position %d:%d ",i,temp->data);
            //printf("The next address of the node %d;%d ",i,temp->next);
        }
    }
    else
      printf("Invalid Input\n");
}
void display()
{
    struct node *temp;
    int i=1;
    if(head==NULL)
      printf("empty list: ");
    else
    {
        temp=head;
        while(temp->next!=NULL)
        {
            printf("The node at position %d:%d ",i,temp->data);
            //printf("The next address of the node %d;%d ",i,temp->next);
            temp=temp->next;
            i++;
        }
        printf("The node at position %d:%d ",i,temp->data);
        //printf("The next address of the node %d;%d ",i,temp->next);
    }
}